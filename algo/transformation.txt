#############################################################
#               ALGORITHME de TRANSFORMATION                #
#############################################################

String TransformationXSL(noeudXSL, noeudXML, sortie)
    pour filsXSL de noeudXSL faire
        1) si value-of
        2) si fore-each
        3) si rien
        4) si apply-template avec atrtibut
        5) si apply-template sans attribut
    retour sortie

Dans l'algorithme, on utilisera la fonction get_sans_balises qui
retournera le contenu d'un noeud sans interpreter les balises.
L'algorithme utilise aussi la fonction get_content qui retourne simplement
le code xml d'un noeud.

Appel initial de la fonction
sortie = TransformationXSL(template_match_racine, racineXML, "")

1) value-of
si select est "." alors
    sortie += get_sans_balises(noeudXML)
sinon
    enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
    pour enfantXML de enfantsXML faire
        sortie += get_sans_balises(enfantXML)

2) fore-each
enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
pour enfantXML de enfantsXML faire
    sortie += TransformationXSL(noeud_foreach, enfantXML, sortie)

3) Rien (pas de balises xsl sp√©ciale)
sortie += get_content(noeudXSL)

4) apply-templates select="something"
templateXSL = noeudXSL template tel que noeudXSL.match = select
enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
pour enfantXML de enfantsXML faire
    sortie += TransformationXSL(templateXSL, enfantXML, sortie)

5) apply-templates sans attribut
enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
pour enfantXML de enfantsXML faire
    templateXSL = noeudXSL tel que noeudXSL.match = enfantXML.nom
    sortie += TransformationXSL(templateXSL, enfantXML, sortie)