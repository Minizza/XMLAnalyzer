#############################################################
#               ALGORITHME de TRANSFORMATION                #
#############################################################

--------------- Fonctions utiles ---------------------------

FONCTION DE ABSTRACTELEMENT ET REDEFINIE DANS ELEMENTDONNEES
String obtenirDonnees()
Elle retourne "" pour abstractelement et noeud.texte pour elementdonnees

APPEL INITIAL DE LA FONCTION
racineXSL = documentXSL.racine.enfants.trouver(xsl:template match="/")
racineXML = documentXML.racine
sortie = racineXSL.TransformationXSL(racineXML, "")

---------------- Fonction pour la classe elementnoeud -------

FONCTION DE ELEMENTNOEUD
String TransformationXSL(noeudXML, sortie)
    1) si noeudXSLCourant est value-of
    2) si noeudXSLCourant est fore-each
    3) si noeudXSLCourant est rien
    4) si noeudXSLCourant est apply-template avec attribut
    5) si noeudXSLCourant est apply-template sans attribut
    6) si noeudXSLCourant est template
retour sortie

1) value-of
si select est "." alors
    pour filsXML de noeudXML faire
        sortie += filsXML.obtenirDonnees()
sinon
    enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
    pour enfantXML de enfantsXML faire
        sortie += enfantXML.obtenirDonnees()

2) fore-each
enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
pour enfantXML de enfantsXML faire
    sortie += noeud_foreach.TransformationXSL(enfantXML, sortie)

3) Rien (pas de balises xsl spéciale)
sortie += "<" + noeudXSL.nom
pour attribut de noeudXSL.attributs faire
    sortie += " " + attribut.nom + "=" + attribut.valeur
sortie += ">"
pour filsXSL de noeudXSL faire
    sortie += filsXSL.TransformationXSL(noeudXML, sortie)    
sortie += "</" + noeudXSL.nom + ">"

4) apply-templates select="something"
templateXSL = noeudXSL template tel que noeudXSL.match = select
enfantsXML = tous les filsXML de noeudXML tels que filsXML.nom = select
pour enfantXML de enfantsXML faire
    sortie += templateXSL.TransformationXSL(enfantXML, sortie)

5) apply-templates sans attribut
enfantsXML = tous les filsXML de noeudXML
pour enfantXML de enfantsXML faire
    templateXSL = noeudXSL tel que noeudXSL.match = enfantXML.nom
    sortie += templateXSL.TransformationXSL(enfantXML, sortie)

6) template match="something"
pour filsXSL de noeudXSL faire
    sortie += filsXSL.TransformationXSL(noeudXML, sortie)

--------------- Fonction pour la classe abstract element ---------

FONCTION DE ABSTRACTELEMENT
String TransformationXSL(noeudXML, sortie)
    retourner sortie

----------- Fonction pour la classe elementdonnées ------------

FONCTION DE ELEMENTDONNEES
String TransformationXSL(noeudXML, sortie)
    retourner sortie += noeudCourantXSL.texte